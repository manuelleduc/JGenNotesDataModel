/**
 * generated by Xtext 2.12.0
 */
package eu.jgen.notes.dm.scoping;

import com.google.common.base.Objects;
import com.google.common.base.Predicate;
import eu.jgen.notes.dm.dataModel.DataModelPackage;
import eu.jgen.notes.dm.dataModel.Entity;
import eu.jgen.notes.dm.dataModel.EntityFeature;
import eu.jgen.notes.dm.dataModel.Identifier;
import eu.jgen.notes.dm.dataModel.Relationship;
import eu.jgen.notes.dm.scoping.AbstractDataModelScopeProvider;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.FilteringScope;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class DataModelScopeProvider extends AbstractDataModelScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      if (((context instanceof Relationship) && Objects.equal(reference, DataModelPackage.Literals.RELATIONSHIP__TARGET))) {
        final EObject rootElement = EcoreUtil2.getRootContainer(context);
        final List<Entity> candidates = EcoreUtil2.<Entity>getAllContentsOfType(rootElement, Entity.class);
        return Scopes.scopeFor(candidates);
      }
      if (((context instanceof Identifier) && Objects.equal(reference, DataModelPackage.Literals.IDENTIFIER__FEATURES))) {
        final EObject rootElement_1 = EcoreUtil2.getRootContainer(context);
        final List<EntityFeature> candidates_1 = EcoreUtil2.<EntityFeature>getAllContentsOfType(rootElement_1, EntityFeature.class);
        return Scopes.scopeFor(candidates_1);
      }
      if (((context instanceof Relationship) && Objects.equal(reference, DataModelPackage.Literals.RELATIONSHIP__RELNAME))) {
        final EObject rootElement_2 = EcoreUtil2.getRootContainer(context);
        final List<Relationship> candidates_2 = EcoreUtil2.<Relationship>getAllContentsOfType(rootElement_2, Relationship.class);
        final IScope existingScope = Scopes.scopeFor(candidates_2);
        final Predicate<IEObjectDescription> _function = (IEObjectDescription it) -> {
          EObject _eObjectOrProxy = it.getEObjectOrProxy();
          return (!Objects.equal(_eObjectOrProxy, context));
        };
        return new FilteringScope(existingScope, _function);
      }
      _xblockexpression = super.getScope(context, reference);
    }
    return _xblockexpression;
  }
}

/*
 * generated by Xtext 2.12.0
 */
package eu.jgen.notes.dm.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import eu.jgen.notes.dm.dataModel.Relationship
import eu.jgen.notes.dm.dataModel.DataModelPackage
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import eu.jgen.notes.dm.dataModel.Entity
import org.eclipse.xtext.scoping.impl.FilteringScope
import eu.jgen.notes.dm.dataModel.Identifier
import eu.jgen.notes.dm.dataModel.EntityFeature

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DataModelScopeProvider extends AbstractDataModelScopeProvider {

	override getScope(EObject context, EReference reference) {

		if (context instanceof Relationship && reference == DataModelPackage.Literals.RELATIONSHIP__TARGET) {
			// Collect a list of candidates by going through the model
			// EcoreUtil2 provides useful functionality to do that
			// For example searching for all elements within the root Object's tree
			val rootElement = EcoreUtil2.getRootContainer(context)
			val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Entity)
			// Create IEObjectDescriptions and puts them into an IScope instance
			return Scopes.scopeFor(candidates)
		}
		
		if (context instanceof Identifier && reference == DataModelPackage.Literals.IDENTIFIER__FEATURES) {
			// Collect a list of candidates by going through the model
			// EcoreUtil2 provides useful functionality to do that
			// For example searching for all elements within the root Object's tree
			val rootElement = EcoreUtil2.getRootContainer(context)
			val candidates = EcoreUtil2.getAllContentsOfType(rootElement, EntityFeature)
			// Create IEObjectDescriptions and puts them into an IScope instance
			return Scopes.scopeFor(candidates)
		}
		
		
		if (context instanceof Relationship && reference == DataModelPackage.Literals.RELATIONSHIP__RELNAME) {
			// Collect a list of candidates by going through the model
			// EcoreUtil2 provides useful functionality to do that
			// For example searching for all elements within the root Object's tree
			val rootElement = EcoreUtil2.getRootContainer(context)
			val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Relationship)
			// Create IEObjectDescriptions and puts them into an IScope instance
			 val existingScope = Scopes.scopeFor(candidates)
        // Scope that filters out the context element from the candidates list
        return new FilteringScope(existingScope, [getEObjectOrProxy != context])
			// return Scopes.scopeFor(candidates)
		}
		

		super.getScope(context, reference)

	}

}

/**
 * generated by Xtext 2.12.0
 */
package eu.jgen.notes.dm.dataModel.impl;

import eu.jgen.notes.dm.dataModel.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DataModelFactoryImpl extends EFactoryImpl implements DataModelFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DataModelFactory init()
  {
    try
    {
      DataModelFactory theDataModelFactory = (DataModelFactory)EPackage.Registry.INSTANCE.getEFactory(DataModelPackage.eNS_URI);
      if (theDataModelFactory != null)
      {
        return theDataModelFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DataModelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataModelFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DataModelPackage.DATA_MODEL: return createDataModel();
      case DataModelPackage.SUBJECT_AREA: return createSubjectArea();
      case DataModelPackage.SUBJECT_AREA_FEATURE: return createSubjectAreaFeature();
      case DataModelPackage.WORKSET: return createWorkset();
      case DataModelPackage.ATTRIBUTE: return createAttribute();
      case DataModelPackage.ENTITY: return createEntity();
      case DataModelPackage.ENTITY_FEATURE: return createEntityFeature();
      case DataModelPackage.RELATIONSHIP: return createRelationship();
      case DataModelPackage.ID_COMPONENT: return createIdComponent();
      case DataModelPackage.IDENTIFIER: return createIdentifier();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataModel createDataModel()
  {
    DataModelImpl dataModel = new DataModelImpl();
    return dataModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SubjectArea createSubjectArea()
  {
    SubjectAreaImpl subjectArea = new SubjectAreaImpl();
    return subjectArea;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SubjectAreaFeature createSubjectAreaFeature()
  {
    SubjectAreaFeatureImpl subjectAreaFeature = new SubjectAreaFeatureImpl();
    return subjectAreaFeature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Workset createWorkset()
  {
    WorksetImpl workset = new WorksetImpl();
    return workset;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EntityFeature createEntityFeature()
  {
    EntityFeatureImpl entityFeature = new EntityFeatureImpl();
    return entityFeature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relationship createRelationship()
  {
    RelationshipImpl relationship = new RelationshipImpl();
    return relationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IdComponent createIdComponent()
  {
    IdComponentImpl idComponent = new IdComponentImpl();
    return idComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Identifier createIdentifier()
  {
    IdentifierImpl identifier = new IdentifierImpl();
    return identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataModelPackage getDataModelPackage()
  {
    return (DataModelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DataModelPackage getPackage()
  {
    return DataModelPackage.eINSTANCE;
  }

} //DataModelFactoryImpl
